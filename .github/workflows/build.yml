---
name: meadow
on: [push]
jobs:
  dependencies:
    if: ${{ ! (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/deploy/') || startsWith(github.ref, 'refs/heads/build/')) }}
    runs-on: ubuntu-latest
    env:
      MIX_ENV: test
    steps:
      - uses: actions/checkout@v2
      - uses: asdf-vm/actions/setup@v1
      - name: Install NodeJS
        run: |
          asdf plugin add nodejs
          asdf install nodejs
          for node_version in $(cat .tool-versions | grep nodejs | awk '{print $2}'); do
            ASDF_NODEJS_VERSION=$node_version npm install -g npm@$(cat .tool-versions | grep npm | awk '{print $2}')
          done
      - uses: erlef/setup-beam@v1
        with:
          otp-version: "24"
          elixir-version: "1.12.1"
      - name: Cache Elixir dependencies
        uses: actions/cache@v2
        with:
          path: |
            app/deps
            app/_build
          key: ${{ runner.os }}-hex-v6-${{ hashFiles('app/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-hex-v6-${{ hashFiles('app/mix.lock') }}
            ${{ runner.os }}-hex-v6-
      - name: Cache JS dependencies
        uses: actions/cache@v2
        with:
          path: |
            app/assets/node_modules
            app/priv/nodejs/*/node_modules
            lambdas/*/node_modules
          key: ${{ runner.os }}-npm-v6-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-v6-${{ hashFiles('**/package-lock.json') }}
            ${{ runner.os }}-npm-v6-
      - name: Install Elixir dependencies
        run: mix do deps.get, deps.compile --force mime, deps.compile
        working-directory: app
      - name: Install JS dependencies
        run: npm install --no-fund
        working-directory: app/assets
      - name: Install Lambda dependencies
        run: |
          for pkg in $(find app/priv/nodejs -maxdepth 2 -name package-lock.json) $(find lambdas -maxdepth 2 -name package-lock.json)
          do
            cd $(dirname $pkg)
            npm install --no-fund
            cd -
          done
  js-test:
    runs-on: ubuntu-latest
    needs: dependencies
    steps:
      - uses: actions/checkout@v2
      - uses: asdf-vm/actions/setup@v1
      - name: Install NodeJS
        run: |
          asdf plugin add nodejs
          asdf install nodejs
          for node_version in $(cat .tool-versions | grep nodejs | awk '{print $2}'); do
            ASDF_NODEJS_VERSION=$node_version npm install -g npm@$(cat .tool-versions | grep npm | awk '{print $2}')
          done
      - name: Cache Elixir dependencies
        uses: actions/cache@v2
        with:
          path: |
            app/deps
            app/_build
          key: ${{ runner.os }}-hex-v6-${{ hashFiles('app/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-hex-v6-${{ hashFiles('app/mix.lock') }}
            ${{ runner.os }}-hex-v6-
      - name: Cache JS dependencies
        uses: actions/cache@v2
        with:
          path: |
            app/assets/node_modules
            app/priv/nodejs/*/node_modules
            lambdas/*/node_modules
          key: ${{ runner.os }}-npm-v6-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-v6-${{ hashFiles('**/package-lock.json') }}
            ${{ runner.os }}-npm-v6-
      - name: JS Static Analysis
        run: npm run-script prettier
        working-directory: app/assets
      - name: JS Tests
        run: npm run-script ci:silent -- -w 1
        working-directory: app/assets
      - name: Test Webpack Build
        run: npm run-script deploy
        working-directory: app/assets
  elixir-test:
    runs-on: ubuntu-latest
    needs: dependencies
    env:
      MIX_ENV: test
    services:
      db:
        image: nulib/postgres:10-alpine
        env:
          POSTGRES_USER: docker
          POSTGRES_PASSWORD: d0ck3r
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5434:5432
      ldap:
        image: nulib/ldap-alpine
        ports:
          - 391:389
          - 638:636
      opensearch:
        image: opensearchproject/opensearch:1.3.1
        env:
          bootstrap.memory_lock: true
          OPENSEARCH_JAVA_OPTS: "-Xms256m -Xmx256m"
          DISABLE_INSTALL_DEMO_CONFIG: true
          DISABLE_SECURITY_PLUGIN: true
          discovery.type: single-node
        ports:
          - 9202:9200
      localstack:
        image: localstack/localstack
        env:
          DNS_ADDRESS: 127.0.0.1
          EDGE_PORT: 4568
          EDGE_PORT_HTTP: 4568
          LAMBDA_EXECUTOR: local
          LOCALSTACK_API_KEY: ${{ secrets.LOCALSTACK_API_KEY }}
        ports:
          - 4568:4568
    steps:
      - uses: actions/checkout@v2
      - uses: actions/checkout@v2
        with:
          repository: "nulib/devstack"
          ref: main
          path: ".devstack"
      - uses: hashicorp/setup-terraform@v1
      - name: Provision Localstack resources
        run: .devstack/bin/devstack -t provision meadow
        env:
          AWS_DEFAULT_REGION: us-east-1
          AWS_ACCESS_KEY_ID: fake
          AWS_SECRET_ACCESS_KEY: fake
      - uses: asdf-vm/actions/setup@v1
      - name: Install NodeJS
        run: |
          asdf plugin add nodejs
          asdf install nodejs
          for node_version in $(cat .tool-versions | grep nodejs | awk '{print $2}'); do
            ASDF_NODEJS_VERSION=$node_version npm install -g npm@$(cat .tool-versions | grep npm | awk '{print $2}')
          done
      - uses: erlef/setup-beam@v1
        with:
          otp-version: "24"
          elixir-version: "1.12.1"
      - name: Install LDAP utils
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y ldap-utils
      - name: Install FFMPEG
        run: |
          mkdir -p ${{ runner.temp }}/ffmpeg && \
          cd ${{ runner.temp }}/ffmpeg && \
          curl https://s3.amazonaws.com/nul-repo-deploy/ffmpeg-release-64bit-static.tar.xz | tar xJ && \
          sudo cp $(find . -type f -executable) /usr/local/bin/ && \
          echo "FFMPEG VERSION: $(ffmpeg -version | sed -n "s/ffmpeg version \([-0-9.]*\).*/\1/p;")"
      - name: Install ExifTool
        run: |
          mkdir -p ${{ runner.temp }}/exiftool && \
          cd ${{ runner.temp }}/exiftool && \
          curl -L -s https://exiftool.org/Image-ExifTool-12.40.tar.gz | tar xz && \
          cd Image-ExifTool-12.40 && \
          perl Makefile.PL && \
          sudo make install
      - name: Cache Elixir dependencies
        uses: actions/cache@v2
        with:
          path: |
            app/deps
            app/_build
          key: ${{ runner.os }}-hex-v6-${{ hashFiles('app/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-hex-v6-${{ hashFiles('app/mix.lock') }}
            ${{ runner.os }}-hex-v6-
      - name: Cache JS dependencies
        uses: actions/cache@v2
        with:
          path: |
            app/assets/node_modules
            app/priv/nodejs/*/node_modules
            lambdas/*/node_modules
          key: ${{ runner.os }}-npm-v6-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-v6-${{ hashFiles('**/package-lock.json') }}
            ${{ runner.os }}-npm-v6-
      - name: Force compile MIME just in case
        run: mix deps.compile --force mime
        working-directory: app
      - name: Elixir Static Analysis
        run: mix credo
        working-directory: app
      - name: Elixir Tests
        run: mix test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: app
      - name: Test DB Rollback
        run: mix ecto.rollback --all
        working-directory: app
  publish:
    if: ${{ (!github.event.pull_request) && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/deploy/') || startsWith(github.ref, 'refs/heads/build/')) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set DEPLOY_ENV from Branch Name
        run: |
          if [[ $BRANCH == 'refs/heads/main' ]]; then
            echo "DEPLOY_ENV=production" >> $GITHUB_ENV
          else
            echo "DEPLOY_ENV=$(echo $BRANCH | awk -F/ '{print $NF}')" >> $GITHUB_ENV
          fi
        env:
          BRANCH: ${{ github.ref }}
      - name: Configure AWS
        run: .github/scripts/configure_aws.sh
        env:
          DEPLOY_ENV: ${{ env.DEPLOY_ENV }}
          GITHUB_ENV: ${{ env.GITHUB_ENV }}
          SECRETS: ${{ toJSON(secrets) }}
      - name: Extract MEADOW_VERSION from mix.exs
        run: echo "MEADOW_VERSION=$(grep '@app_version "' mix.exs | sed -n 's/^.*"\(.*\)".*/\1/p')" >> $GITHUB_ENV
        working-directory: app
      - run: echo "Building Meadow v${MEADOW_VERSION} as nulib/meadow:${DEPLOY_ENV}"
      - name: Tag Meadow Release
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          git config --global user.email "$(git log --pretty=format:"%ae" | head -1)"
          git config --global user.name "$(git log --pretty=format:"%an" | head -1)"
          git tag -a v${MEADOW_VERSION} -m "Release ${MEADOW_VERSION}"
      - uses: docker/setup-qemu-action@v1
      - uses: docker/setup-buildx-action@v1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - uses: satackey/action-docker-layer-caching@v0.0.11
      - uses: docker/build-push-action@v2
        with:
          context: ./app
          push: true
          tags:  ${{ steps.login-ecr.outputs.registry }}/meadow:${{ env.DEPLOY_ENV }}
          build-args: |
            HONEYBADGER_API_KEY=${{ secrets.HONEYBADGER_API_KEY }}
            HONEYBADGER_API_KEY_FRONTEND=${{ secrets.HONEYBADGER_API_KEY_FRONTEND }}
            HONEYBADGER_ENVIRONMENT=${{ env.DEPLOY_ENV }}
            HONEYBADGER_REVISION=${{ github.sha }}
            MEADOW_VERSION=${{ env.MEADOW_VERSION }}
      - name: Upload Source Maps to Honeybadger
        run: .github/scripts/upload_source_maps.sh
        env:
          DEPLOY_ENV: ${{ env.DEPLOY_ENV }}
          MEADOW_IMAGE: ${{ steps.login-ecr.outputs.registry }}/meadow:${{ env.DEPLOY_ENV }}
          MEADOW_VERSION: ${{ env.MEADOW_VERSION }}
          HONEYBADGER_API_KEY_FRONTEND: ${{ secrets.HONEYBADGER_API_KEY_FRONTEND }}
          HONEYBADGER_REVISION: ${{ github.sha }}
      - name: Set GitHub Deploy Key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.REPO_PRIVATE_KEY }}
      - name: Push Release Tag
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          git push origin v${MEADOW_VERSION}
  deploy:
    needs: publish
    if: ${{ ! startsWith(github.ref, 'refs/heads/build/') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Set DEPLOY_ENV from Branch Name
        run: |
          if [[ $BRANCH == 'refs/heads/main' ]]; then
            echo "DEPLOY_ENV=production" >> $GITHUB_ENV
          else
            echo "DEPLOY_ENV=$(echo $BRANCH | awk -F/ '{print $NF}')" >> $GITHUB_ENV
          fi
        env:
          BRANCH: ${{ github.ref }}
      - name: Configure AWS
        run: .github/scripts/configure_aws.sh
        env:
          DEPLOY_ENV: ${{ env.DEPLOY_ENV }}
          GITHUB_ENV: ${{ env.GITHUB_ENV }}
          SECRETS: ${{ toJSON(secrets) }}
      - name: Update ECS Service
        run: .github/scripts/update_ecs_service.sh
        env:
          ECS_CLUSTER: meadow
          ECS_CONTAINER: meadow
          ECS_SERVICE: meadow
          ECS_TASK: meadow-all
          PRIOR_HEAD: ${{ github.event.before }}
      - name: Notify Honeybadger
        run: .github/scripts/honeybadger_deploy_notification.sh
        env:
          DEPLOY_ENV: ${{ env.DEPLOY_ENV }}
          HONEYBADGER_API_KEY: ${{ secrets.HONEYBADGER_API_KEY }}
          HONEYBADGER_REVISION: ${{ github.sha }}
