resource "random_string" "db_password" {
  length  = "16"
  special = "false"
}

# Using the postgresql provider to manage the database and user resources
# causes problems because it requires connecting directly to the database
# during the plan and apply phases. This is not possible because the database
# is in a private subnet where we cannot reach it directly. Instead, we will
# need to manage the database and user resources manually:
#
# 1. Connect to the database using the bastion host.
#    ```bash
#    ssh -i ~/.ssh/bastion.pem -L 5432:meadow.cluster-123456789012.us-east-1.rds.amazonaws.com:5432 ec2-user@bastion
#    psql -h localhost -U postgres -d postgres # Use the module.data_services.outputs.aurora.admin_password
#    ```
# 2. Create the database and user.
#    ```sql
#    CREATE DATABASE meadow;
#    CREATE USER meadow WITH PASSWORD 'password'; # Use the password generated by the random_string resource
#    GRANT ALL PRIVILEGES ON DATABASE meadow TO meadow;
#    \c meadow
#    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
#    ```
# 3. Grant the necessary permissions to the user.
#

# provider "postgresql" {
#   host            = module.data_services.outputs.aurora.endpoint
#   port            = module.data_services.outputs.aurora.port
#   username        = module.data_services.outputs.aurora.admin_user
#   password        = module.data_services.outputs.aurora.admin_password
#   sslmode         = "require"
#   connect_timeout = 15
#   superuser       = false
# }

# resource "postgresql_role" "meadow" {
#   name        = "meadow"
#   password    = random_string.db_password.result
#   login       = true
# }

# resource "postgresql_database" "meadow" {
#   name        = "meadow"
#   owner       = postgresql_role.meadow.name
#   encoding    = "UTF8"
#   lc_collate  = "en_US.UTF-8"
#   template    = "template0"
# }

# resource "postgresql_extension" "uuid" {
#   name = "uuid-ossp"
# }