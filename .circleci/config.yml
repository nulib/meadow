---
version: 2.1
orbs:
  aws-cli: circleci/aws-cli@0.1
  docker: circleci/docker@0.5.19
jobs:
  test:
    working_directory: ~/meadow
    docker:
      - image: circleci/elixir:1.9-node
        environment:
          DATABASE_URL: ecto://root@localhost/circle_test
          DB_PORT: "5432"
          ELASTICSEARCH_URL: "http://localhost:9200"
          MIX_ENV: test
      - image: circleci/postgres:10-alpine
        environment:
          POSTGRES_USER: docker
          POSTGRES_PASSWORD: d0ck3r
      - image: nulib/goaws
      - image: nulib/ldap-alpine
      - image: docker.elastic.co/elasticsearch/elasticsearch:6.3.2
      - image: minio/minio
        environment:
          MINIO_ACCESS_KEY: minio
          MINIO_SECRET_KEY: minio123
        command: server /data
    steps:
      - run:
          name: Install LDAP utils
          command: sudo apt-get install -y ldap-utils
      - checkout
      - restore_cache:
          keys:
            - hex-cache-{{ .Environment.CACHE_PREFIX }}-{{ checksum "mix.lock" }}
            - hex-cache-{{ .Environment.CACHE_PREFIX }}-
      - restore_cache:
          keys:
            - npm-cache-{{ .Environment.CACHE_PREFIX }}-{{ checksum "priv/tiff/yarn.lock" }}-{{ checksum "assets/yarn.lock" }}
            - npm-cache-{{ .Environment.CACHE_PREFIX }}-{{ checksum "priv/tiff/yarn.lock" }}-
            - npm-cache-{{ .Environment.CACHE_PREFIX }}-
      - run:
          name: Install hex & rebar
          command: mix do local.hex --force, local.rebar --force
      - run:
          name: Install Elixir Dependencies
          command: mix do deps.get, deps.compile
      - run:
          name: Install JS Dependencies
          command: yarn install
          working_directory: ~/meadow/assets
      - run:
          name: Install Pyramid Dependencies
          command: yarn install
          working_directory: ~/meadow/priv/tiff
      - save_cache:
          key: hex-cache-{{ .Environment.CACHE_PREFIX }}-{{ checksum "mix.lock" }}
          paths:
            - ~/meadow/deps
            - ~/meadow/_build
      - save_cache:
          key: npm-cache-{{ .Environment.CACHE_PREFIX }}-{{ checksum "priv/tiff/yarn.lock" }}-{{ checksum "assets/yarn.lock" }}
          paths:
            - ~/meadow/assets/node_modules
            - ~/meadow/priv/tiff/node_modules
      - run:
          name: Elixir Static Analysis
          command: mix credo
      - run:
          name: Elixir Tests
          command: mix coveralls.circle
      - run:
          name: JS Static Analysis
          command: yarn prettier
          working_directory: ~/meadow/assets
      - run:
          name: JS Tests
          command: |
            yarn ci
          working_directory: ~/meadow/assets
      - run:
          name: Test Webpack Build
          command: yarn deploy
          working_directory: ~/meadow/assets
      - store_artifacts:
          path: /tmp/test-results
          destination: tests
  publish:
    docker:
      - image: circleci/python:3.7.1
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Set DEPLOY_TAG from branch name
          command: |
            if [[ $CIRCLE_BRANCH == "master" ]]; then
              echo "export DEPLOY_TAG=production" >> $BASH_ENV
            else
              echo "export DEPLOY_TAG=$(echo $CIRCLE_BRANCH | awk -F/ '{print $NF}')" >> $BASH_ENV
            fi
      - docker/check
      - docker/build:
          cache_from: nulib/meadow-deps:${DEPLOY_TAG}
          image: nulib/meadow
          tag: ${DEPLOY_TAG}
      - run:
          command: |
            DEPS_IMAGE=$(docker image ls --filter "label=edu.northwestern.library.app=meadow" --filter "label=edu.northwestern.library.stage=deps" --format '{{.CreatedAt}}\t{{.ID}}' | sort -nr | cut -f2 | head -1)
            docker tag ${DEPS_IMAGE} nulib/meadow-deps:${DEPLOY_TAG}
      - docker/push:
          image: nulib/meadow-deps
          tag: ${DEPLOY_TAG}
      - docker/push:
          image: nulib/meadow
          tag: ${DEPLOY_TAG}
  deploy:
    docker:
      - image: circleci/python:3.7.1
    steps:
      - run:
          name: Set DEPLOY_TAG from branch name
          command: |
            if [[ $CIRCLE_BRANCH == "master" ]]; then
              echo "export DEPLOY_TAG=production" >> $BASH_ENV
            else
              echo "export DEPLOY_TAG=$(echo $CIRCLE_BRANCH | awk -F/ '{print $NF}')" >> $BASH_ENV
            fi
      - run:
          command: |
            echo "export AWS_ACCESS_KEY_ID=\$${DEPLOY_TAG}_AWS_ACCESS_KEY_ID" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=\$${DEPLOY_TAG}_AWS_SECRET_ACCESS_KEY" >> $BASH_ENV
      - aws-cli/install
      - aws-cli/setup
      - run:
          name: Update ECS service
          environment:
            APP_NAME: meadow
            ECS_CLUSTER: meadow
            ECS_SERVICE: meadow
            ECS_TASK: meadow-app
            ECS_CONTAINER: meadow-app
          command: |
            networkconfig=$(aws ecs describe-services --cluster ${ECS_CLUSTER} --service ${ECS_SERVICE} | jq -cM '.services[0].networkConfiguration')
            overrides="{\"containerOverrides\":[{\"name\":\"${ECS_CONTAINER}\",\"command\":[\"eval\",\"Meadow.ReleaseTasks.migrate()\"]}]}"
            aws ecs run-task --cluster ${ECS_CLUSTER} --task-definition ${ECS_TASK} --overrides ${overrides} --launch-type FARGATE --network-configuration ${networkconfig}
            aws ecs update-service --cluster ${ECS_CLUSTER} --service ${ECS_SERVICE} --force-new-deployment
workflows:
  ci:
    jobs:
      - test
      - publish:
          requires:
            - test
          filters:
            branches:
              only:
                - /^build-.+/
                - /^deploy\/.+/
      - deploy:
          requires:
            - publish
          filters:
            branches:
              only:
                - /^deploy\/.+/
