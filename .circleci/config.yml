---
version: 2.1
orbs:
  aws-cli: circleci/aws-cli@1.3.1
  docker: circleci/docker@0.5.19
jobs:
  dependencies:
    working_directory: ~/meadow
    docker:
      - image: circleci/elixir:1.12-node
    steps:
      - checkout
      - run:
          name: Install hex & rebar
          command: mix do local.hex --force, local.rebar --force
      - restore_cache:
          keys:
            - hex-cache-{{ .Environment.CACHE_PREFIX }}-{{ checksum "mix.lock" }}-{{ .Branch }}
            - hex-cache-{{ .Environment.CACHE_PREFIX }}-{{ checksum "mix.lock" }}
            - hex-cache-{{ .Environment.CACHE_PREFIX }}-
      - restore_cache:
          keys:
            - build-cache-{{ .Environment.CACHE_PREFIX }}-{{ checksum "mix.lock" }}-{{ .Branch }}
            - build-cache-{{ .Environment.CACHE_PREFIX }}-{{ checksum "mix.lock" }}
            - build-cache-{{ .Environment.CACHE_PREFIX }}-
      - restore_cache:
          keys:
            - yarn-cache-{{ .Environment.CACHE_PREFIX }}-{{ checksum "./assets/yarn.lock" }}-{{ .Branch }}
            - yarn-cache-{{ .Environment.CACHE_PREFIX }}-{{ checksum "./assets/yarn.lock" }}-
            - yarn-cache-{{ .Environment.CACHE_PREFIX }}-
      - run:
          name: Install Elixir Dependencies
          command: mix do deps.get, deps.compile
          environment:
            MIX_ENV: test
      - run:
          name: Install JS Dependencies
          command: yarn install --cwd assets
      - save_cache:
          key: hex-cache-{{ .Environment.CACHE_PREFIX }}-{{ checksum "mix.lock" }}-{{ .Branch }}
          paths:
            - ~/meadow/deps
      - save_cache:
          key: build-cache-{{ .Environment.CACHE_PREFIX }}-{{ checksum "mix.lock" }}-{{ .Branch }}
          paths:
            - ~/meadow/_build
      - save_cache:
          key: yarn-cache-{{ .Environment.CACHE_PREFIX }}-{{ checksum "./assets/yarn.lock" }}-{{ .Branch }}
          paths:
            - ~/meadow/assets/node_modules
  js-test:
    working_directory: ~/meadow
    docker:
      - image: circleci/elixir:1.12-node
    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-cache-{{ .Environment.CACHE_PREFIX }}-{{ checksum "./assets/yarn.lock" }}-{{ .Branch }}
            - yarn-cache-{{ .Environment.CACHE_PREFIX }}-{{ checksum "./assets/yarn.lock" }}-
            - yarn-cache-{{ .Environment.CACHE_PREFIX }}-
      - run:
          name: JS Static Analysis
          command: yarn prettier
          working_directory: ~/meadow/assets
      - run:
          name: JS Tests
          command: |
            yarn ci -w 1
          working_directory: ~/meadow/assets
      - run:
          name: Test Webpack Build
          command: yarn deploy
          working_directory: ~/meadow/assets
  elixir-test:
    working_directory: ~/meadow
    docker:
      - image: circleci/elixir:1.12-node
        environment:
          DATABASE_URL: ecto://root@localhost/circle_test
          DB_PORT: "5432"
          ELASTICSEARCH_URL: "http://localhost:9200"
          MIX_ENV: test
      - image: circleci/postgres:10-alpine
        environment:
          POSTGRES_USER: docker
          POSTGRES_PASSWORD: d0ck3r
      - image: nulib/goaws
      - image: nulib/ldap-alpine
      - image: bitnami/elasticsearch:6
        environment:
          ELASTICSEARCH_HEAP_SIZE: "256m"
      - image: minio/minio
        environment:
          MINIO_ACCESS_KEY: minio
          MINIO_SECRET_KEY: minio123
        command: server /data
    steps:
      - run:
          name: Install LDAP utils
          command: sudo apt-get install -y ldap-utils
      - run:
          name: Install FFMPEG
          command: |
            mkdir -p /tmp/ffmpeg && \
            cd /tmp/ffmpeg && \
            curl https://s3.amazonaws.com/nul-repo-deploy/ffmpeg-release-64bit-static.tar.xz | tar xJ && \
            sudo cp `find . -type f -executable` /usr/local/bin/ && \
            echo "FFMPEG VERSION: $(ffmpeg -version | sed -n "s/ffmpeg version \([-0-9.]*\).*/\1/p;")"
      - checkout
      - run:
          name: Install hex & rebar
          command: mix do local.hex --force, local.rebar --force
      - restore_cache:
          keys:
            - hex-cache-{{ .Environment.CACHE_PREFIX }}-{{ checksum "mix.lock" }}-{{ .Branch }}
            - hex-cache-{{ .Environment.CACHE_PREFIX }}-{{ checksum "mix.lock" }}
            - hex-cache-{{ .Environment.CACHE_PREFIX }}-
      - restore_cache:
          keys:
            - build-cache-{{ .Environment.CACHE_PREFIX }}-{{ checksum "mix.lock" }}-{{ .Branch }}
            - build-cache-{{ .Environment.CACHE_PREFIX }}-{{ checksum "mix.lock" }}
            - build-cache-{{ .Environment.CACHE_PREFIX }}-
      - restore_cache:
          keys:
            - yarn-cache-{{ .Environment.CACHE_PREFIX }}-{{ checksum "./assets/yarn.lock" }}-{{ .Branch }}
            - yarn-cache-{{ .Environment.CACHE_PREFIX }}-{{ checksum "./assets/yarn.lock" }}-
            - yarn-cache-{{ .Environment.CACHE_PREFIX }}-
      - run:
          name: Install Lambda Dependencies
          command: |
            for pkg in $(find priv/nodejs -maxdepth 2 -name yarn.lock)
            do
              echo "yarn install --cwd $(dirname $pkg)"
              yarn install --cwd $(dirname $pkg)
            done
      - run:
          name: Elixir Static Analysis
          command: mix credo
          environment:
            MIX_ENV: test
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Elixir Tests
          command: mix coveralls.circle
      - run:
          name: Test db rollback
          command: mix ecto.rollback --all
          environment:
            MIX_ENV: test
      - store_artifacts:
          path: /tmp/test-results
          destination: tests
  publish:
    docker:
      - image: circleci/python:3.7.1
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Set DEPLOY_TAG from branch name
          command: |
            if [[ $CIRCLE_BRANCH == "master" ]]; then
              echo "export DEPLOY_TAG=production" >> $BASH_ENV
            else
              echo "export DEPLOY_TAG=$(echo $CIRCLE_BRANCH | awk -F/ '{print $NF}')" >> $BASH_ENV
            fi
      - run:
          name: Extract MEADOW_VERSION from mix.exs
          command: |
            echo "export MEADOW_VERSION=$(grep '@app_version "' mix.exs | sed -n 's/^.*"\(.*\)".*/\1/p')" >> $BASH_ENV
      - when:
          condition:
            equal: [ master, << pipeline.git.branch >> ]
          steps:
            - run:
                name: "Tag release"
                command: |
                  git config --global user.email "$(git log --pretty=format:"%ae" | head -1)"
                  git config --global user.name "$(git log --pretty=format:"%an" | head -1)"
                  git tag -a v${MEADOW_VERSION} -m "Release ${MEADOW_VERSION}"
      - docker/check
      - docker/build:
          cache_from: nulib/meadow-deps:${DEPLOY_TAG}
          extra_build_args: --build-arg HONEYBADGER_API_KEY=${HONEYBADGER_API_KEY} --build-arg HONEYBADGER_API_KEY_FRONTEND=${HONEYBADGER_API_KEY_FRONTEND} --build-arg HONEYBADGER_ENVIRONMENT=${DEPLOY_TAG} --build-arg HONEYBADGER_REVISION=${CIRCLE_SHA1} --build-arg MEADOW_VERSION=${MEADOW_VERSION}
          image: nulib/meadow
          tag: ${DEPLOY_TAG}
      - run:
          name: Tag Deps Image
          command: |
            DEPS_IMAGE=$(docker image ls --filter "label=edu.northwestern.library.app=meadow" --filter "label=edu.northwestern.library.stage=deps" --format '{{.CreatedAt}}\t{{.ID}}' | sort -nr | cut -f2 | head -1)
            docker tag ${DEPS_IMAGE} nulib/meadow-deps:${DEPLOY_TAG}
      - docker/push:
          image: nulib/meadow-deps
          tag: ${DEPLOY_TAG}
      - docker/push:
          image: nulib/meadow
          tag: ${DEPLOY_TAG}
      - run:
          name: Upload Source Maps to Honeybadger
          command: ./.circleci/scripts/upload_source_maps.sh
      - when:
          condition:
            equal: [ master, << pipeline.git.branch >> ]
          steps:
            - run:
                name: "Push release tag"
                command: git push origin v${MEADOW_VERSION}
          
  deploy:
    executor: aws-cli/default
    steps:
      - checkout
      - run:
          name: Set DEPLOY_TAG from branch name
          command: |
            if [[ $CIRCLE_BRANCH == "master" ]]; then
              echo "export DEPLOY_TAG=production" >> $BASH_ENV
            else
              echo "export DEPLOY_TAG=$(echo $CIRCLE_BRANCH | awk -F/ '{print $NF}')" >> $BASH_ENV
            fi
      - run:
          command: |
            echo "export AWS_ACCESS_KEY_ID=\$${DEPLOY_TAG}_AWS_ACCESS_KEY_ID" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=\$${DEPLOY_TAG}_AWS_SECRET_ACCESS_KEY" >> $BASH_ENV
      - aws-cli/setup
      - run:
          name: Update ECS service
          environment:
            APP_NAME: meadow
            ECS_CLUSTER: meadow
            ECS_SERVICE: meadow
            ECS_TASK: meadow-all
            ECS_CONTAINER: meadow
          command: ./.circleci/scripts/update_ecs_service.sh
      - run:
          name: Notify Honeybadger
          command: ./.circleci/scripts/honeybadger_deploy_notification.sh
workflows:
  ci:
    jobs:
      - dependencies
      - js-test:
          requires:
            - dependencies
      - elixir-test:
          requires:
            - dependencies
      - publish:
          requires:
            - js-test
            - elixir-test
          filters:
            branches:
              only:
                - /^build-.+/
                - /^deploy\/.+/
                - master
      - deploy:
          requires:
            - publish
          filters:
            branches:
              only:
                - /^deploy\/.+/
                - master
